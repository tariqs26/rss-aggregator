// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
INSERT INTO
    feed_follows (feed_id, user_id)
VALUES ($1, $2) RETURNING id, created_at, updated_at, feed_id, user_id
`

type CreateFeedFollowParams struct {
	FeedID int32
	UserID uuid.UUID
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow, arg.FeedID, arg.UserID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.FeedID,
		&i.UserID,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
DELETE FROM feed_follows WHERE id = $1 AND user_id = $2
`

type DeleteFeedFollowParams struct {
	ID     int32
	UserID uuid.UUID
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.ID, arg.UserID)
	return err
}

const getFeedFollows = `-- name: GetFeedFollows :many
SELECT
    ff.id,
    ff.created_at,
    ff.updated_at,
    ff.feed_id,
    ff.user_id,
    f.name,
    f.url,
    f.created_at as feed_created_at,
    f.updated_at as feed_updated_at
FROM feed_follows ff
    INNER JOIN feeds f ON ff.feed_id = f.id
WHERE
    ff.user_id = $1
`

type GetFeedFollowsRow struct {
	ID            int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
	FeedID        int32
	UserID        uuid.UUID
	Name          string
	Url           string
	FeedCreatedAt time.Time
	FeedUpdatedAt time.Time
}

func (q *Queries) GetFeedFollows(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsRow
	for rows.Next() {
		var i GetFeedFollowsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FeedID,
			&i.UserID,
			&i.Name,
			&i.Url,
			&i.FeedCreatedAt,
			&i.FeedUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
